// A simple module to replace `Backbone.sync` with *localStorage*-based
// persistence. Models are given GUIDS, and saved into a JSON object. Simple
// as that.

// Generate four random hex digits.
function S4() {
	return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
};

// Generate a pseudo-GUID by concatenating random hexadecimal.
function guid() {
	return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4()
			+ S4() + S4());
};

// Our Store is represented by a single JS object in *localStorage*. Create it
// with a meaningful name, like the name you'd give a table.
var LocalStorage = function(name) {
	this.name = name;
	this.data = new Array();
	if (typeof(localStorage) == 'undefined' ) {
		alert('Your browser does not support HTML5 localStorage. Try upgrading.');
	} else {
		var store = localStorage.getItem(this.name);
		if (store) {
			this.data = JSON.parse(store);
		}
	}
};

_.extend(LocalStorage.prototype, {

	// Save the current state of the **Store** to *localStorage*.
	save : function() {
		try {
			localStorage.setItem(this.name, JSON.stringify(this.data));
		} catch (e) {
		 	 if (e == QUOTA_EXCEEDED_ERR) {
		 	 	 alert('Quota exceeded!'); //data wasn't successfully saved due to quota exceed so throw an error
			}
		}
	},
	
	saveOrUpdate : function(model) {
		if (!this.find(model)) {
			this.create(model);
		} 
	},

	create : function(model) {
		if (!model.id)
			return null; //do not bother saving the object if no id is specified.
		this.data.push(model.id);
		this.save();
		return model;
	},

	// Retrieve a model from `this.data` by id.
	find : function(model) {
		var idx = this.data.indexOf(model.id);
		return this.data[idx];
	},

	// Return the array of all models currently in storage.
	findAll : function() {
		return _.values(this.data);
	},
	
	remove : function(model) {
		
		var idx = this.data.indexOf(model.id);
		if (idx >= 0) {
			this.data.splice(idx, 1);
			this.save();
		} 
		return model;
	},
	
	clear : function() {
		this.data = new Array();
		this.save();
	},
	
	isEmpty : function() {
		return _.isEmpty(this.data);
	}

});

