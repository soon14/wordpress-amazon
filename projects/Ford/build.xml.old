<!--
*
*  Dragonfly UI build script descriptor.
*
-->
<project name="Dragonfly UI build script" default="init">

	<property name="basedir" value="." />
	<!--<property file="build_version.properties"/>-->

	<!--
       register all web theme folders here (as a comma separated list)
       each folder must contain a separate copy of lib-carve tools
       -->
	<!--<property name="web.folders" value="GUX,FTD2010,FTD2011Mob,RAD2013,LINCOLN2014" />-->
	<property name="web.folders" value="gux" />

	<echo>

        This is the basedir:

        ${basedir}

    </echo>

	<property name="build.root" value="${basedir}/build" />
	<property name="build.work.root" value="${basedir}/build/work" />
	<property name="output.root" value="${basedir}/dist" />


	<!-- machine-specific config -->
	<property file="${basedir}/build.properties" />

	<!-- VERSION TAGS @mmiinc -->
	<!--<property file="${basedir}/build_version.properties"/>-->

	<property environment="env" />
	<condition property="command.path" value='${env.Path};${compass.path}' else='${env.PATH}'>
		<isset property='env.Path' />
	</condition>

	<path id="ant.contrib.path">
		<fileset dir="${basedir}/tools/ant-contrib">
			<include name="*.jar" />
		</fileset>
	</path>


	<!--
		<taskdef name="jsdoc" classname="net.jannon.ant.tasks.JsDoc3" classpathref="jsdoc.classpath"/>
		-->
	<taskdef classpathref="ant.contrib.path" resource="net/sf/antcontrib/antlib.xml" />

	<tstamp>
		<format property="timestamp" pattern="yyyyMMdd.hhmmss" />
	</tstamp>

	<!-- default details of the server -->
	<property name="default-server" value="10.1.1.86" />
	<property name="default-dir" value="/opt/IBM/HTTPServer/htdocs/en_US/" />

	<path id="compress.classpath">
		<pathelement location="${basedir}/src/lib-carve/js/js.jar" />
		<pathelement location="${basedir}/src/lib-carve/js/compiler.jar" />
	</path>

	<!-- skip-tests: determines whether unit tests are run in the mvn package targets; defaults to true. -->
	<property name="skip-tests" value="true" />
	<condition property="run-unit-tests">
		<isfalse value="${skip-tests}" />
	</condition>


	<!-- targets -->

	<target name="build" depends="init" description="Builds the distribution for prod.">
		<antcall target="compile-sass" />
		<antcall target="compile-js" />
	</target>

	<target name="clean" description="Cleans the project.">
		<delete dir="${build.root}" failonerror="false" />
		<delete dir="${output.root}" failonerror="false" />
	</target>

	
	
	<target name="compile-js">
		
		<property environment="env" />

		<java fork="true" maxmemory="512m" failonerror="true" dir="${basedir}" classname="org.mozilla.javascript.tools.shell.Main">
			<classpath refid="compress.classpath" />
			<arg value="lib-carve/js/build.js" />
		</java>
		<!-- process all web folders, i.e. compress JS and copy -->
		<for list="${web.folders}" param="folder">
			<sequential>
				<echo>Compressing @{folder} ...</echo>
				<!-- run compress FTD -->
				
				<mkdir dir="${output.root}/themes/@{folder}/js/live" />
				<!-- copy to a main package folder together -->
				<copy todir="${output.root}/themes/@{folder}/js/live" overwrite="true">
					<fileset dir="${build.root}/src/themes/@{folder}/js/live">
						<include name="**/*.*" />
					</fileset>
				</copy>
			</sequential>
		</for>

		<!--
        ================================================================
        Create a WAR file
        ================================================================
        -->
		<echo message="Building war file..." />
		<!--<war destfile="${build.webapp}/ear/cs.war" webxml="${build.webapp}/war/WEB-INF/web.xml">-->
		<!--<manifest>-->
		<!--<attribute name="Built-By" value="${user.name}" />-->
		<!--<attribute name="Built-For" value="${environment}" />-->
		<!--<attribute name="Build-Time" value="${build.time}" />-->
		<!--<attribute name="Build-Tag" value="${svnLoc}" />-->
		<!--</manifest>-->
		<!--<fileset dir="${build.webapp}/war">-->
		<!--<exclude name="**/web.xml" />-->
		<!--</fileset>-->
		<!--</war>-->
		<echo message="Building ear file..." />

	</target>

	<target name="compile-sass">
		<for list="${web.folders}" param="folder">
			<sequential>
				<echo>Compiling SASS for theme @{folder} ...</echo>

				<!-- compiles scss to css COMPRESSED -->
				<exec executable="${compass.command}" dir="${build.root}/src/themes/@{folder}">
					<env key="PATH" path="${command.path}" />
					<arg value="compile" />
					<arg value="-s" />
					<arg value="compressed" />
				</exec>

				<mkdir dir="${output.root}/themes/@{folder}" />
				<!-- copy to a main package folder together -->
				<copy todir="${output.root}/themes/@{folder}" overwrite="true">
					<fileset dir="${build.root}/src/themes/@{folder}">
						<include name="**/*.css" />
						<include name="**/*.gif" />
						<include name="**/*.png" />
						<include name="**/*.jpeg" />
						<include name="**/*.jpg" />
						<include name="**/*.ttf" />
						<include name="**/*.eot" />
						<include name="**/*.woff" />
						<include name="**/*.svg" />
					</fileset>
				</copy>
			</sequential>
		</for>
	</target>

	<target name="dist-local" depends="init" description="Relase from local version of the files...for testing purposees only">
		<mkdir dir="${build.root}/src" />
		<copy todir="${build.root}/src" overwrite="true">
			<fileset dir="${basedir}/src">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<mkdir dir="${build.root}/test" />
		<copy todir="${build.root}/test" overwrite="true">
			<fileset dir="${basedir}/test">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<antcall target="build" />
	</target>
	
	<!--
	Build distribution version
	-->
	<target name="dist" depends="init, clean" description="Pull files from SVN">
		
		<svn>
			<export srcUrl="${svnLoc}/client/src" destPath="${build.root}/src" />
			<!--<export srcUrl="${svn.rtb.url}/${svnLoc}/test" destPath="${build.root}/test" />-->
		</svn>

		<antcall target="build" />
	</target>
	
	
	<!--
	Sets SVN location
	-->
	<target name="setSvnLocation" depends="init">
		<if>
			<isset property="branch"/>
			<then>
				<property name="svnBranch" value="branches/${branch}" />
					
			</then>
			<elseif>
				<isset property="tag"/>
				<then>
					<property name="svnBranch" value="tags/${tag}" />
				</then>
			</elseif>
			<else>
				<fail message="You have to specify either tag or branch."/>
			</else>
		</if>
		
		<echo message="svnBranch set to ${svnBranch}"> </echo>
	</target>

	<target name="init" description="Displays configuration / performs initialization">
		
		<property name="svn.rtb.url" value="http://subversion.corp.nextdigital.com/NextDigital/java/dragonfly/rtb" />
		
		<echo>
			project config:
			
            build.root: ${build.root}
            output.root: ${output.root}
        </echo>
		
		
		
	</target>

	
	
</project>
